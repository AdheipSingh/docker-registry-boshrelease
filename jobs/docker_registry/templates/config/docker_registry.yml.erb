# The `common' part is automatically included (and possibly overriden by all
# other flavors)
common:
  # Bucket for storage
  boto_bucket: <%= p("docker_registry.boto_bucket") %>

  storage_path: "/var/vcap/store/docker_registry"
  loglevel: <%= p("docker_registry.loglevel") %>


  # Set a random string here
  secret_key: <%= p("docker_registry.secret_key") %>

  # Enabling LRU cache for small files. This speeds up read/write on small files
  # when using a remote storage backend (like S3).
  # cache:
  #     host: _env:CACHE_REDIS_HOST
  #     port: _env:CACHE_REDIS_PORT
  #     password: _env:CACHE_REDIS_PASSWORD
  # cache_lru:
  #     host: _env:CACHE_LRU_REDIS_HOST
  #     port: _env:CACHE_LRU_REDIS_PORT
  #     password: _env:CACHE_LRU_REDIS_PASSWORD
  # Enabling these options makes the Registry send an email on each code Exception
  # email_exceptions:
  #     smtp_host: REPLACEME
  #     smtp_port: 25
  #     smtp_login: REPLACEME
  #     smtp_password: REPLACEME
  #     smtp_secure: false
  #     from_addr: docker-registry@localdomain.local
  #     to_addr: noise+dockerregistry@localdomain.local
  # Enable bugsnag (set the API key)
  # bugsnag: REPLACEME

local:
  storage: local

s3:
  storage: s3
  <% if_p("docker_registry.s3_access_key", "docker_registry.s3_secret_key",
          "docker_registry.s3_bucket", "docker_registry.s3_encrypt",
          "docker_registry.s3_secure") do |s3_access_key, s3_secret_key, s3_bucket, s3_encrypt, s3_secure| %>
  # Amazon S3 Storage Configuration
  s3_access_key: <%= s3_access_key %>
  s3_secret_key: <%= s3_access_key %>
  s3_bucket: <%= s3_access_key %>
  s3_encrypt: <%= s3_access_key %>
  s3_secure: <%= s3_access_key %>
  <% end %>

# This flavor is for storing images in Openstack Swift
swift:
  storage: swift
  <% if_p("docker_registry.swift_authurl", "docker_registry.swift_container",
          "docker_registry.swift_user", "docker_registry.swift_password",
          "docker_registry.swift_tenant_name") do |swift_authurl, swift_container, swift_user, swift_password, swift_tenant_name| %>
  # keystone authorization
  swift_authurl: <%= swift_authurl %>
  swift_container: <%= swift_container %>
  swift_user: <%= swift_user %>
  swift_password: <%= swift_password %>
  swift_tenant_name: <%= swift_tenant_name %>
  <% end %>
  <% if_p("docker_registry.swift_region_name") do |swift_region_name| %>
  swift_region_name: <%= swift_region_name %>
  <% end %>

# This flavor stores the images in Glance (to integrate with openstack)
# See also: https://github.com/dotcloud/openstack-docker
openstack:
  storage: glance
  storage_alternate: local

# This flavor stores the images in Glance (to integrate with openstack)
# and tags in Swift. 
openstack-swift:
  storage: glance
  storage_alternate: swift
  <% if_p("docker_registry.swift_authurl", "docker_registry.swift_container",
          "docker_registry.swift_user", "docker_registry.swift_password",
          "docker_registry.swift_tenant_name") do |swift_authurl, swift_container, swift_user, swift_password, swift_tenant_name| %>
  # keystone authorization
  swift_authurl: <%= swift_authurl %>
  swift_container: <%= swift_container %>
  swift_user: <%= swift_user %>
  swift_password: <%= swift_password %>
  swift_tenant_name: <%= swift_tenant_name %>
  <% end %>
  <% if_p("docker_registry.swift_region_name") do |swift_region_name| %>
  swift_region_name: <%= swift_region_name %>
  <% end %>

# Google Cloud Storage Configuration
# See:
# https://developers.google.com/storage/docs/reference/v1/getting-startedv1#keys
# for details on access and secret keys.
google:
  storage: google
  <% if_p("docker_registry.gs_access_key", "docker_registry.gs_secret_key",
          "docker_registry.gs_secure") do |gs_access_key, gs_secret_key, gs_secure| %>
  gs_access_key: <%= p("docker_registry.gs_access_key") %>
  gs_secret_key: <%= p("docker_registry.gs_secret_key") %>
  gs_secure: <%= p("docker_registry.gs_secure") %>
  <% end %>
